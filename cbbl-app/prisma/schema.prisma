generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // âœ… Required for NextAuth
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // âœ… not nullable
  passwordHash  String?

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  carts     Cart[]
  favorites Favorite[]

  // ðŸ”¹ Opposite sides
  ratings   Rating[]
  feedbacks OrderFeedback[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  content   String
  createdAt DateTime @default(now())
  replied   Boolean  @default(false)
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeStatus String // "open", "closed", "busy"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  mediumPrice  Float?
  largePrice   Float?
  imageUrl     String
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id])
  isNew        Boolean  @default(false)
  isBestSeller Boolean  @default(false)
  type         String   @default("FOOD")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
  favorites  Favorite[]

  // ðŸ”¹ Opposite side
  ratings Rating[]
}

model Rating {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  orderItemId String    @db.ObjectId
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  rating Int
  review String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderItemId, userId])
}

model OrderFeedback {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  appExperience         Int
  orderCompleteness     Int
  speedOfService        Int
  valueForMoney         Int
  reservationExperience Int
  overallSatisfaction   Int
  overallReview         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, userId])
}

model Seat {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  capacity    Int      @default(1)
  imageUrl    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders  Order[]
  walkIns WalkIn[]
}

model WalkIn {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  seatId String @db.ObjectId
  seat   Seat   @relation(fields: [seatId], references: [id], onDelete: Cascade)

  guest     Int      @default(1)
  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  status      String      @default("Pending")
  totalAmount Float

  // âœ… Link to Seat
  seatId String? @db.ObjectId
  seat   Seat?   @relation(fields: [seatId], references: [id])

  guest     Int      @default(1)
  startTime DateTime // ðŸ†• When reservation starts
  endTime   DateTime // ðŸ†• When reservation ends

  time         DateTime?
  paymentProof String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // ðŸ”¹ Opposite sides
  ratings   Rating[]
  feedbacks OrderFeedback[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Float // snapshot of product price at the time of order
  size      String?

  // ðŸ”¹ Opposite side
  ratings Rating[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  size      String?
  quantity  Int     @default(1)
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId]) // âœ… prevents duplicate favorites
}

model CMS {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  landingSecOneTitle         String?
  landingSecOneDesc          String?
  landingSecOneButtonText    String?
  landingSecOneImage         String?
  landingSecOneImagePublicId String?

  landingSecTwoTitle         String?
  landingSecTwoDesc          String?
  landingSecTwoContent       String?
  landingSecTwoImage         String?
  landingSecTwoImagePublicId String?

  landingSecThreeTitle     String?
  landingSecThreeDesc      String?
  landingSecThreeButtonOne String?
  landingSecThreeButtonTwo String?

  landingSecFourTitle    String?
  landingSecFourDesc     String?
  landingSecFourLocation String?
  landingSecFourPhoneNum String?
  landingSecFourEmail    String?

  qrCodeImage         String?
  qrCodeImagePublicId String?
  paymentNumber       String?

  qrCodeMayaImage String?
  qrCodeImageMayaPublicId String?
  paymentMayaNumber String?
}
