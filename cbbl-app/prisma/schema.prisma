generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // ✅ Required for NextAuth
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // ✅ not nullable
  passwordHash  String?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @map("_id") @db.ObjectId @default(auto())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  content   String
  createdAt DateTime @default(now())
  replied   Boolean  @default(false)
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  imageUrl     String
  categoryId   String    @db.ObjectId
  category     Category  @relation(fields: [categoryId], references: [id])
  isNew        Boolean   @default(false)
  isBestSeller Boolean   @default(false)
  totalOrders  Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Reservations (table booking)
// model Reservation {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   date      DateTime
//   timeSlot  String
//   guests    Int
//   status    String   @default("PENDING") // "CONFIRMED", "CANCELED"
//   createdAt DateTime @default(now())
// }

// Virtual Queue
// model Queue {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   position  Int
//   status    String   @default("WAITING") // "SEATED", "LEFT"
//   createdAt DateTime @default(now())
// }

// Pre-Orders for takeout
// model PreOrder {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   items     Json                     // list of menu items
//   pickupAt  DateTime
//   status    String   @default("PENDING") // "READY", "PICKEDUP"
//   createdAt DateTime @default(now())
// }

// Feedback and ratings
// model Feedback {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   rating    Int
//   comment   String
//   createdAt DateTime @default(now())
// }

// model Seat {
//   id          String        @id @default(auto()) @map("_id") @db.ObjectId
//   seatNumber  String        @unique
//   capacity    Int
//   isAvailable Boolean       @default(true)
//   reservations Reservation[]
// }

// model Reservation {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @db.ObjectId
//   user      User     @relation(fields: [userId], references: [id])
//   seatId    String?  @db.ObjectId
//   seat      Seat?    @relation(fields: [seatId], references: [id])
//   date      DateTime
//   timeSlot  String
//   guests    Int
//   status    String   @default("PENDING")
//   createdAt DateTime @default(now())
// }


