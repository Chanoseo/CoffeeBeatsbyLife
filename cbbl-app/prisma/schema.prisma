generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // âœ… Required for NextAuth
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // âœ… not nullable
  passwordHash  String?

  accounts Account[]
  sessions Session[]
  orders   Order[]
  carts    Cart[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  content   String
  createdAt DateTime @default(now())
  replied   Boolean  @default(false)
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  price        Float
  imageUrl     String
  categoryId   String   @db.ObjectId
  category     Category @relation(fields: [categoryId], references: [id])
  isNew        Boolean  @default(false)
  isBestSeller Boolean  @default(false)
  type         String   @default("FOOD")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Seat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique // e.g. "Seat 1"
  capacity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders  Order[] // relation to Order
  walkIns WalkIn[]
}

model WalkIn {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  seatId String @db.ObjectId
  seat   Seat   @relation(fields: [seatId], references: [id], onDelete: Cascade)

  guest     Int      @default(1)
  startTime DateTime
  endTime   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  status      String      @default("Pending")
  totalAmount Float

  // âœ… Link to Seat
  seatId String? @db.ObjectId
  seat   Seat?   @relation(fields: [seatId], references: [id])

  guest     Int      @default(1)
  startTime DateTime // ðŸ†• When reservation starts
  endTime   DateTime // ðŸ†• When reservation ends

  time         DateTime?
  paymentProof String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Float // snapshot of product price at the time of order
  size      String?
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  size      String?
  quantity  Int     @default(1)
}
